import prompts from 'prompts'
import makeApiRequest from './makeApiRequest'
import { ApiEndpoints, Application } from './types'
import { writeFileSync } from 'fs'

const getTextFromPrompt = async (message: string, initialValue?: string): Promise<string> => {
    const questions: prompts.PromptObject[] = [
        {
            name: 'prompt',
            type: 'text',
            initial: initialValue,
            message,
        },
    ]
    const response = await prompts(questions)
    return response.prompt
}

const getApplicationName = (): Promise<string> => {
    return getTextFromPrompt('Application name?')
}

const getApplicationSlug = (applicationName: string): Promise<string> => {
    return getTextFromPrompt('Application slug?', applicationName)
}

const getOrganizationId = (): Promise<string> => {
    return getTextFromPrompt('Organization ID?')
}

const makeConfigFile = (app: Application) => `
/** This file is generated by DC:AV. DO NOT EDIT **/
module.exports = {
  applicationId: "${app.id}",
  version: "0.0.0"
};

`

export default async (): Promise<void> => {
    try {
        const name = await getApplicationName()
        const slug = await getApplicationSlug(name)
        const organizationId = await getOrganizationId()

        const application = await makeApiRequest(ApiEndpoints.RegisterApplication, {
            name,
            slug,
            organizationId,
        })

        console.log(
            `The application (${application.slug}) has been registered successfully. A config file has been added to the CWD`,
        )

        writeFileSync(process.cwd(), makeConfigFile(application), 'UTF8')
    } catch (err) {
        console.log(`An error was encountered. Application registry failed.`)
        console.log(err)
        process.exit()
    }
}
